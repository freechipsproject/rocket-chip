
RISCV Rocket-Chip Xcelium Migration - Source : [https://github.com/chipsalliance/rocket-chip]

This is a copy of the README file containing the instructions and steps that you should have ALREADY FOLLOWED!
Please verify that you meet all the system requirements and that you executed all the necessary steps.

************************ REQUIREMENTS FOR THE MACHINE **********************************************************************


Pre-requisites to download, build and compile the project:

1. OS - RHEL 7
2. GCC Compiler version = 4.8.x
3. Linux packages :
	i. automake - version 1.14.1 [available under /grid/common/pkgs/automake]
	ii aclocal - version 1.14.1
	iii autoconf - version 2.64 or higher
	iii dtc - version 1.4.2
	iv Please check Github link [[https://github.com/chipsalliance/rocket-chip] if your system is missing any other necessary dependencies
4. Access to internet from within the environment
5. Atleast 20 GB disk space



*********************  THE ABOVE REQUIREMENTS HAVE TO BE MET BEFORE PROCEEDING FURTHER *****************************************


Once the system and environment requirements are met, please follow these steps:

1. Go to a directory which has > 20 GB space.
	i. mkdir RISCV_ROCKET_CHIP_DIR/   [ Can specify any name]
	ii. cd RISCV_ROCKET_CHIP_DIR/

2. git clone https://github.com/ucb-bar/rocket-chip.git

3. cd rocket-chip/

4. git submodule update --init 


5. git clone https://github.com/freechipsproject/rocket-tools

6. cd rocket-tools/

7. git submodule update --init --recursive  [This will ~ 20 - 30 minutes to complete].

8. cd riscv-isa-sim/fesvr

9. Open htif.cc -
	i. Search for "payloads.push_back" [Line 258]
	ii. change 'payloads' to 'targs'  [i.e targs.push_back]
	iii. save the file

10. Go back to rocket-tools/ directory.   [cd ../../]

11. ./build.sh 		[This takes ~ 2 hours to complete].
	i. After build is complete, the line "RISC-V Toolchain installation completed!" should be seen.
	ii. verify that a directory "riscv/toolchain/" has been created under the specified path (<your_own_path>/RISCV_ROCKET_CHIP_DIR/riscv/toolchain/)

12. Go back to rocket-chip/  directory  


13. cd xm_run/

14. To compile under xm_run/ -
	make       			[This creates generated-src/ under xm_run/ which has the RTL files generated by Chisel/ FIRRTL].

15. At this point build and compilation is COMPLETE !

16. The ELF test file binaries going to be used for running the sim are created under -
	 i. <your_own_path>/RISCV_ROCKET_CHIP_DIR/riscv/toolchain/riscv64-unknown-elf/share/riscv-tests/isa/
	 ii. <your_own_path>/RISCV_ROCKET_CHIP_DIR/riscv/toolchain/riscv64-unknown-elf/share/riscv-tests/benchmarks/

17. To RUN a single test [for sanity purpose], under xm_run/ directory -
	make run test_name=$RISCV/riscv64-unknown-elf/share/riscv-tests/isa/rv64uf-p-move  ["rv64uf-p-move" is an example of an ELF test binary]

18. Check the output of the simulation  -
 	i. under xm_run/SIM_LOGS/xrun_test_name.log  [ "PASSED" at the end of the file indicates the test ran to completion].


19. To RUN the simulations -
	 i. To run the regression of all 222 tests, under xm_run/ directory -
		make run_all

20. The outputs of running the simulation are -
	i. elaboration log is generated under xm_run/ELAB_LOGS/
 	ii. xrun.log for each test under xm_run/SIM_LOGS/xrun_test_name.log  [ "PASSED" at the end of the file indicates the test ran to completion].
	iii. output file for each test under xm_run/output/test_name.out 

 	

 

